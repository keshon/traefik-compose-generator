#!/bin/sh
# build-n-run.sh - Generates Traefik docker-compose with ports from .env

echo "------------------------------"
echo "Traefik Docker Compose Generator"
echo "------------------------------"

# -------------------------------
# Constants: Child scripts
# -------------------------------
SCRIPT_BUILD="build-n-run.sh"
SCRIPT_BASIC_AUTH="traefik-basic-auth.sh"
SCRIPT_CERTS_EXTRACT="traefik-certs-extract.sh"
SCRIPT_LOG_ROTATE="traefik-logrotate.sh"

# -------------------------------
# Constants: Docker-compose files
# -------------------------------
COMPOSE_BASE="docker-compose.yml"
COMPOSE_OVERRIDE="docker-compose.override.yml"
COMPOSE_CERTS="docker-compose.certs.yml"
COMPOSE_LOGROTATE="docker-compose.logrotate.yml"

# -------------------------------
# Ensure .env file exists
# -------------------------------
if [ -f .env ]; then
    # shellcheck source=/dev/null
    . ./.env
else
    echo ".env file not found. Please create it from .env.example"
    exit 1
fi

# -------------------------------
# Ensure DATA_DIR is set
# -------------------------------
if [ -z "$DATA_DIR" ]; then
    echo "DATA_DIR is not set in .env"
    exit 1
fi

mkdir -p "$DATA_DIR/acme"
chmod 600 "$DATA_DIR/acme/acme.json" 2>/dev/null || touch "$DATA_DIR/acme/acme.json"

if [ -z "$LETSENCRYPT_EMAIL" ]; then
    echo "LETSENCRYPT_EMAIL is not set in .env"
    exit 1
fi

# -------------------------------
# Ensure scripts are executable
# -------------------------------
for script in "$SCRIPT_BUILD" "$SCRIPT_BASIC_AUTH" "$SCRIPT_CERTS_EXTRACT" "$SCRIPT_LOG_ROTATE"; do
    [ -f "$script" ] && chmod +x "$script"
done

# -------------------------------
# Process custom ports
# -------------------------------
PORTS_LIST=$(echo "${CUSTOM_PORTS}" | tr ',' ' ')
PORTS_SECTION=""
ENTRYPOINTS_COMMANDS=""
for port in $PORTS_LIST; do
    PORTS_SECTION="$PORTS_SECTION            - \"$port:$port\"\n            - \"$port:$port/udp\"\n"
    ENTRYPOINTS_COMMANDS="$ENTRYPOINTS_COMMANDS            - \"--entrypoints.tcp-$port.address=:$port\"\n            - \"--entrypoints.udp-$port.address=:$port/udp\"\n"
done

# -------------------------------
# Generate docker-compose.yml
# -------------------------------
cat > "$COMPOSE_BASE" <<EOF
# Auto-generated by $SCRIPT_BUILD

networks:
    proxy:
        external: true
services:
    traefik:
        image: traefik:latest
        container_name: traefik
        restart: always
        networks:
            - proxy
        ports:
            - "80:80"
            - "443:443"
$(echo -e "$PORTS_SECTION")
        environment:
            TZ: \${TZ}
        command:
            - "--api.insecure=true"
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
$(echo -e "$ENTRYPOINTS_COMMANDS")
            - "--providers.docker.endpoint=unix:///var/run/docker.sock"
            - "--providers.docker.network=proxy"
            - "--providers.docker.watch=true"
            - "--certificatesresolvers.letsencrypt.acme.email=\${LETSENCRYPT_EMAIL}"
            - "--certificatesresolvers.letsencrypt.acme.storage=acme.json"
            - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
            - "--log.filepath=/logs/traefik.log"
            - "--log.level=${LOG_LEVEL}"
            - "--accesslog.filepath=/logs/access.log"
            - "--accesslog.bufferingsize=100"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - ${DATA_DIR}/logs:/logs
            - ${DATA_DIR}/acme/acme.json:/acme.json
EOF

echo "$COMPOSE_BASE generated with ports: $PORTS_LIST"

# -------------------------------
# Generate docker-compose.override.yml
# -------------------------------
if [ -n "$DASHBOARD_HOSTNAME" ]; then
cat > "$COMPOSE_OVERRIDE" << 'EOF'
services:
    traefik:
        labels:
            - "traefik.enable=true"
            - "traefik.http.routers.traefik-dashboard-http.entrypoints=http"
            - "traefik.http.routers.traefik-dashboard-http.rule=Host(`${DASHBOARD_HOSTNAME}`)"
            - "traefik.http.routers.traefik-dashboard-http.service=api@internal"
            - "traefik.http.routers.traefik-dashboard-http.middlewares=redirect"
            - "traefik.http.routers.traefik-dashboard-https.entrypoints=https"
            - "traefik.http.routers.traefik-dashboard-https.rule=Host(`${DASHBOARD_HOSTNAME}`)"
            - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
            - "traefik.http.routers.traefik-dashboard-https.tls=true"
            - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=letsencrypt"
            - "traefik.http.routers.traefik-dashboard-https.middlewares=auth"
            - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_LOGIN}:${DASHBOARD_PASSWORD_HASH}"
            - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
EOF
    echo "$COMPOSE_OVERRIDE generated for Traefik dashboard at $DASHBOARD_HOSTNAME"
else
    echo "DASHBOARD_HOSTNAME not set, skipping $COMPOSE_OVERRIDE generation"
fi

# -------------------------------
# Generate docker-compose.certs.yml
# -------------------------------
cat > "$COMPOSE_CERTS" <<EOF
services:
    traefik-certs-extract:
        image: alpine:latest
        container_name: traefik-certs
        restart: always
        depends_on:
            - traefik
        environment:
            - TZ=\${TZ}
        working_dir: /
        volumes:
            - ./$SCRIPT_CERTS_EXTRACT:/certs-extract.sh:ro
            - \${DATA_DIR}/acme:/acme:ro
            - \${DATA_DIR}/certs:/certs
        entrypoint: ["/bin/sh", "-c", "sh /certs-extract.sh --watch"]
EOF

echo "$COMPOSE_CERTS generated for Traefik certs exporter"

# -------------------------------
# Generate docker-compose.logrotate.yml
# -------------------------------
cat > "$COMPOSE_LOGROTATE" <<EOF
services:
    traefik-log-rotate:
        image: alpine:latest
        container_name: traefik-logrotate
        restart: always
        depends_on:
            - traefik
        environment:
            - TZ=\${TZ}
            - LOG_ROTATE_MAX_BACKUPS=\${LOG_ROTATE_MAX_BACKUPS}
            - LOG_ROTATE_TRIGGER_SIZE=\${LOG_ROTATE_TRIGGER_SIZE}
        working_dir: /
        volumes:
            - ./$SCRIPT_LOG_ROTATE:/log-rotate.sh:ro
            - \${DATA_DIR}/logs:/logs
            - /var/run/docker.sock:/var/run/docker.sock:ro
        entrypoint: ["/bin/sh", "-c", "sh /log-rotate.sh --watch"]
EOF

echo "$COMPOSE_LOGROTATE generated for Traefik log rotation"

# -------------------------------
# Basic auth fallback
# -------------------------------
if [ -z "$DASHBOARD_LOGIN" ] || [ -z "$DASHBOARD_PASSWORD_HASH" ]; then
    echo "DASHBOARD_LOGIN or DASHBOARD_PASSWORD_HASH is empty - running ./traefik-basic-auth.sh..."
    
    if [ -f "./traefik-basic-auth.sh" ] && [ -x "./traefik-basic-auth.sh" ]; then
        sh ./traefik-basic-auth.sh --skip-restart
    else
        echo "Error: ./traefik-basic-auth.sh not found or not executable"
    fi
fi

# -------------------------------
# Example labels for new ports
# -------------------------------
for port in $PORTS_LIST; do
    cat <<EOL
# TCP $port
- "traefik.tcp.routers.app-${port}.rule=HostSNI(\`*\`)"
- "traefik.tcp.routers.app-${port}.entrypoints=tcp-${port}"
- "traefik.tcp.routers.app-${port}.service=app-${port}"
- "traefik.tcp.services.app-${port}.loadbalancer.server.port=${port}"

# UDP $port
- "traefik.udp.routers.app-${port}.entrypoints=udp-${port}"
- "traefik.udp.routers.app-${port}.service=app-${port}"
- "traefik.udp.services.app-${port}.loadbalancer.server.port=${port}"
EOL
done

# -------------------------------
# Docker check and (re)start
# -------------------------------
if command -v docker >/dev/null 2>&1; then
    if command -v docker-compose >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker-compose"
    elif docker compose version >/dev/null 2>&1; then
        DOCKER_COMPOSE="docker compose"
    else
        echo "Docker found, but neither docker-compose nor docker compose available"
        exit 1
    fi

    echo "Docker environment found ($DOCKER_COMPOSE)"

    if ! docker network ls --format '{{.Name}}' | grep -q '^proxy$'; then
        echo "Network 'proxy' not found, creating..."
        docker network create proxy
    fi

    echo "Starting/restarting containers..."
    $DOCKER_COMPOSE -f "$COMPOSE_BASE" \
                    -f "$COMPOSE_OVERRIDE" \
                    -f "$COMPOSE_CERTS" \
                    -f "$COMPOSE_LOGROTATE" up -d --force-recreate

    echo "Traefik + dashboard + certs + logrotate exporter restarted successfully"
else
    echo "Docker not found - skipping restart"
fi