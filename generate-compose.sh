#!/bin/bash
# generate-compose.sh - Generates Traefik docker-compose with ports from .env

# Load .env variables
if [ -f .env ]; then
    source .env
else
    echo "‚ö†Ô∏è .env file not found. Please create it from .env.example"
    exit 1
fi

# Check DATA_DIR
if [[ -z "$DATA_DIR" ]]; then
    echo "‚ö†Ô∏è DATA_DIR is not set in .env"
    exit 1
fi

# Ensure base DATA_DIR exists
if [[ ! -d "$DATA_DIR" ]]; then
    echo "‚ö†Ô∏è DATA_DIR ($DATA_DIR) not found ‚Üí creating..."
    mkdir -p "$DATA_DIR"
    echo "‚úÖ Created $DATA_DIR"
fi

# Ensure acme dir exists
if [[ ! -d "$DATA_DIR/acme" ]]; then
    echo "‚ö†Ô∏è $DATA_DIR/acme not found ‚Üí creating..."
    mkdir -p "$DATA_DIR/acme"
    echo "‚úÖ Created $DATA_DIR/acme"
fi

# Ensure acme.json exists with 600 permissions
if [[ ! -f "$DATA_DIR/acme/acme.json" ]]; then
    echo "‚ö†Ô∏è $DATA_DIR/acme/acme.json not found ‚Üí creating..."
    touch "$DATA_DIR/acme/acme.json"
    chmod 600 "$DATA_DIR/acme/acme.json"
    echo "‚úÖ Created $DATA_DIR/acme/acme.json with permissions 600"
else
    echo "‚úÖ Found $DATA_DIR/acme/acme.json (keeping existing file)"
fi

# Check if LETSENCRYPT_EMAIL is set
if [[ -z "$LETSENCRYPT_EMAIL" ]]; then
    echo "‚ö†Ô∏è LETSENCRYPT_EMAIL is not set in .env"
    exit 1
fi

# If ports separated by comma - replace with spaces
PORTS_LIST=${CUSTOM_PORTS//,/ }

# Generate ports section
PORTS_SECTION=""
for port in $PORTS_LIST; do
    PORTS_SECTION+="            - \"$port:$port\"\n"
    PORTS_SECTION+="            - \"$port:$port/udp\"\n"
done

# Generate entrypoints commands
ENTRYPOINTS_COMMANDS=""
for port in $PORTS_LIST; do
    ENTRYPOINTS_COMMANDS+="            - \"--entrypoints.tcp-$port.address=:$port\"\n"
    ENTRYPOINTS_COMMANDS+="            - \"--entrypoints.udp-$port.address=:$port/udp\"\n"
done

# Generate base docker-compose.yml for Traefik
cat > docker-compose.yml << EOF
# This file is auto-generated by generate-compose.sh
# Do not edit manually

networks:
    proxy:
        external: true
services:
    traefik:
        image: traefik:latest
        container_name: traefik
        restart: always
        networks:
            - proxy
        ports:
            # HTTP ports
            - "80:80"
            - "443:443"
            # Custom TCP/UDP ports
$(echo -e "$PORTS_SECTION")
        environment:
            DOCKER_HOST: "tcp://socket-proxy:2375"
            TZ: \${TZ}
        command:
            - "--api.insecure=true"
            # HTTP entrypoints
            - "--entrypoints.http.address=:80"
            - "--entrypoints.https.address=:443"
            # Custom TCP/UDP entrypoints
$(echo -e "$ENTRYPOINTS_COMMANDS")
            # Docker provider
            - "--providers.docker.endpoint=tcp://socket-proxy:2375"
            - "--providers.docker.network=proxy"
            - "--providers.docker.watch=true"
            # ACME provider
            - "--certificatesresolvers.letsencrypt.acme.email=\${LETSENCRYPT_EMAIL}"
            - "--certificatesresolvers.letsencrypt.acme.storage=acme.json"
            - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
            # Logging
            - "--log.filepath=/logs/traefik.log"
            - "--log.level=${LOG_LEVEL}"
            - "--accesslog.filepath=/logs/access.log"
            - "--accesslog.bufferingsize=100"
        volumes:
            - ${DATA_DIR}/logs:/logs
            - ${DATA_DIR}/acme/acme.json:/acme.json
EOF
echo "‚úÖ docker-compose.yml for Traefik generated with ports: $PORTS_LIST"

# Generate docker-compose.override.yml for Traefik dashboard
if [[ -n "$DASHBOARD_HOSTNAME" ]]; then
cat > docker-compose.override.yml << 'EOF'
# This file is auto-generated by generate-compose.sh
# Do not edit manually

services:
    traefik:
        labels:
            - "traefik.enable=true"

            # HTTP
            - "traefik.http.routers.traefik-dashboard-http.entrypoints=http"
            - "traefik.http.routers.traefik-dashboard-http.rule=Host(`${DASHBOARD_HOSTNAME}`)"
            - "traefik.http.routers.traefik-dashboard-http.service=api@internal"
            - "traefik.http.routers.traefik-dashboard-http.middlewares=redirect"

            # HTTPS
            - "traefik.http.routers.traefik-dashboard-https.entrypoints=https"
            - "traefik.http.routers.traefik-dashboard-https.rule=Host(`${DASHBOARD_HOSTNAME}`)"
            - "traefik.http.routers.traefik-dashboard-https.service=api@internal"
            - "traefik.http.routers.traefik-dashboard-https.tls=true"
            - "traefik.http.routers.traefik-dashboard-https.tls.certresolver=letsencrypt"
            - "traefik.http.routers.traefik-dashboard-https.middlewares=auth"

            # Basic Authentication
            - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_LOGIN}:${DASHBOARD_PASSWORD_HASH}"

            # Redirect HTTP to HTTPS
            - "traefik.http.middlewares.redirect.redirectscheme.scheme=https"
EOF
    echo "‚úÖ docker-compose.override.yml generated for Traefik dashboard at ${DASHBOARD_HOSTNAME}"
else
    echo "‚ö†Ô∏è DASHBOARD_HOSTNAME not set, skipping docker-compose.override.yml generation"
fi

# If DASHBOARD_LOGIN or DASHBOARD_PASSWORD_HASH are empty ‚Üí run generate-auth.sh
if [[ -z "$DASHBOARD_LOGIN" || -z "$DASHBOARD_PASSWORD_HASH" ]]; then
    echo "‚ö†Ô∏è DASHBOARD_LOGIN or DASHBOARD_PASSWORD_HASH is empty ‚Üí running generate-auth.sh..."
    if [[ -x ./generate-auth.sh ]]; then
        ./generate-auth.sh --skip-restart
    else
        echo "‚ùé generate-auth.sh not found or not executable"
    fi
fi

# Check if Docker is available
if command -v docker &> /dev/null; then
    # Detect docker-compose flavor
    if command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE="docker-compose"
        elif docker compose version &> /dev/null; then
        DOCKER_COMPOSE="docker compose"
    else
        echo "‚ùé Docker found, but neither docker-compose nor docker compose available"
        exit 1
    fi
    
    echo "‚úÖ Docker environment found ($DOCKER_COMPOSE)"
    
    # Check if network 'proxy' exists, if not ‚Üí create it
    if ! docker network ls --format '{{.Name}}' | grep -q '^proxy$'; then
        echo "‚ö†Ô∏è Network 'proxy' not found ‚Üí creating..."
        docker network create proxy
        echo "‚úÖ Network 'proxy' created"
    fi
    
    echo "üîÑ Restarting containers..."
    $DOCKER_COMPOSE up -d --force-recreate
    echo "‚úÖ Traefik restarted successfully!"
else
    echo "‚ùé Docker not found - skipping restart"
    echo ""
    echo "To restart manually run (depending on your version):"
    echo "docker-compose down && docker-compose up -d"
    echo "or"
    echo "docker compose down && docker compose up -d"
fi

echo ""
echo "To change ports:"
echo "1. Edit CUSTOM_PORTS in .env file"
echo "2. Run: ./generate-compose.sh"
echo ""
echo "Example of usage new ports labels in target containers:"
echo ""
echo "    labels:"
echo "      - \"traefik.enable=true\""

for port in $PORTS_LIST; do
    cat <<EOL
      # TCP $port
      - "traefik.tcp.routers.app-${port}.rule=HostSNI(\`*\`)"
      - "traefik.tcp.routers.app-${port}.entrypoints=tcp-${port}"
      - "traefik.tcp.routers.app-${port}.service=app-${port}"
      - "traefik.tcp.services.app-${port}.loadbalancer.server.port=${port}"

      # UDP $port
      - "traefik.udp.routers.app-${port}.entrypoints=udp-${port}"
      - "traefik.udp.routers.app-${port}.service=app-${port}"
      - "traefik.udp.services.app-${port}.loadbalancer.server.port=${port}"

EOL
done